#!/usr/bin/env node

import { spawn } from 'child_process';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é MCP —Å –ø—Ä–æ–¥–∞–∫—à–Ω API
process.env.ASTROVISOR_API_KEY = 'pk-admin-7-CfrQ_Kvu96sPBIbTH15QEFTQIX1DMq0UJtdwhNXRU';
process.env.ASTROVISOR_URL = 'https://astrovisor.io';

console.log('üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢: –õ–æ–∫–∞–ª—å–Ω—ã–π MCP 1.2.0 + –ü—Ä–æ–¥–∞–∫—à–Ω API');
console.log('üîß MCP –≤–µ—Ä—Å–∏—è: –õ–æ–∫–∞–ª—å–Ω–∞—è v1.2.0 —Å BaZi');
console.log('üîß API: https://astrovisor.io');
console.log('üîß BaZi endpoints: /api/bazi/*\n');

// –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é MCP —Å–µ—Ä–≤–µ—Ä–∞
const mcp = spawn('node', ['build/index.js'], {
  stdio: ['pipe', 'pipe', 'pipe'],
  env: process.env
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
mcp.stderr.on('data', (data) => {
  const msg = data.toString();
  if (!msg.includes('–∑–∞–ø—É—â–µ–Ω')) {
    console.error('MCP Error:', msg);
  }
});

let testsPassed = 0;
const totalTests = 4;

// –¢–µ—Å—Ç 1: –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
const listToolsRequest = {
  jsonrpc: '2.0',
  id: 1,
  method: 'tools/list'
};

// –¢–µ—Å—Ç 2: BaZi Info
const baziInfoRequest = {
  jsonrpc: '2.0',
  id: 2,
  method: 'tools/call',
  params: {
    name: 'get_bazi_info',
    arguments: {}
  }
};

// –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ BaZi –∫–∞—Ä—Ç—ã
const baziChartRequest = {
  jsonrpc: '2.0',
  id: 3,
  method: 'tools/call',
  params: {
    name: 'calculate_bazi_chart',
    arguments: {
      name: 'ÈôàÊòé',
      datetime: '1985-06-10T08:30:00',
      latitude: 31.2304,
      longitude: 121.4737,
      location: 'Shanghai, China',
      timezone: 'Asia/Shanghai'
    }
  }
};

// –¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ BaZi
const baziPersonalityRequest = {
  jsonrpc: '2.0',
  id: 4,
  method: 'tools/call',
  params: {
    name: 'analyze_bazi_personality',
    arguments: {
      name: 'ÈôàÊòé',
      datetime: '1985-06-10T08:30:00',
      latitude: 31.2304,
      longitude: 121.4737,
      location: 'Shanghai, China',
      timezone: 'Asia/Shanghai'
    }
  }
};

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
setTimeout(() => {
  console.log('1. üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...');
  mcp.stdin.write(JSON.stringify(listToolsRequest) + '\n');
}, 1000);

setTimeout(() => {
  console.log('2. ‚ÑπÔ∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ BaZi API...');
  mcp.stdin.write(JSON.stringify(baziInfoRequest) + '\n');
}, 2000);

setTimeout(() => {
  console.log('3. üêâ –°–æ–∑–¥–∞–Ω–∏–µ BaZi –∫–∞—Ä—Ç—ã –¥–ª—è ÈôàÊòé...');
  mcp.stdin.write(JSON.stringify(baziChartRequest) + '\n');
}, 3000);

setTimeout(() => {
  console.log('4. üßò –ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ BaZi...');
  mcp.stdin.write(JSON.stringify(baziPersonalityRequest) + '\n');
}, 4000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
mcp.stdout.on('data', (data) => {
  const lines = data.toString().split('\n').filter(line => line.trim());
  
  lines.forEach(line => {
    try {
      const response = JSON.parse(line);
      
      if (response.id === 1) {
        // –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        const tools = response.result?.tools || [];
        const baziTools = tools.filter(tool => tool.name.includes('bazi'));
        
        console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫: ${tools.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);
        console.log(`   ‚úÖ BaZi –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${baziTools.length}`);
        
        if (baziTools.length >= 4) {
          testsPassed++;
          console.log('   üéØ –¢–µ—Å—Ç 1 –ü–†–û–ô–î–ï–ù: –í—Å–µ BaZi –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã');
        } else {
          console.log('   ‚ùå –¢–µ—Å—Ç 1 –ù–ï –ü–†–û–ô–î–ï–ù: –ù–µ –≤—Å–µ BaZi –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã');
        }
      }
      
      if (response.id === 2) {
        // BaZi Info
        const content = response.result?.content?.[0]?.text || '';
        console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ BaZi API`);
        
        if (content.includes('BaZi') && content.includes('2.0.0')) {
          testsPassed++;
          console.log('   üéØ –¢–µ—Å—Ç 2 –ü–†–û–ô–î–ï–ù: BaZi API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞');
        } else {
          console.log('   ‚ùå –¢–µ—Å—Ç 2 –ù–ï –ü–†–û–ô–î–ï–ù: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è API');
        }
      }
      
      if (response.id === 3) {
        // BaZi Chart
        const content = response.result?.content?.[0]?.text || '';
        console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è BaZi –∫–∞—Ä—Ç—ã`);
        
        if (content.includes('ÂõõÊü±ÂÖ´Â≠ó') && content.includes('ÈôàÊòé')) {
          testsPassed++;
          console.log('   üéØ –¢–µ—Å—Ç 3 –ü–†–û–ô–î–ï–ù: BaZi –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
          console.log('   üéØ –ö–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è ‚úì');
        } else if (content.includes('error') || content.includes('Error')) {
          console.log('   ‚ö†Ô∏è  –¢–µ—Å—Ç 3: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã (–≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω API –∫–ª—é—á)');
        } else {
          console.log('   ‚ùå –¢–µ—Å—Ç 3 –ù–ï –ü–†–û–ô–î–ï–ù: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–∞—Ä—Ç—ã');
        }
      }
      
      if (response.id === 4) {
        // BaZi Personality
        const content = response.result?.content?.[0]?.text || '';
        console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—á–Ω–æ—Å—Ç–∏`);
        
        if (content.includes('ÈôàÊòé') || content.includes('BaZi') || content.includes('personality')) {
          testsPassed++;
          console.log('   üéØ –¢–µ—Å—Ç 4 –ü–†–û–ô–î–ï–ù: –ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        } else {
          console.log('   ‚ö†Ô∏è  –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–µ–Ω endpoint –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—á–Ω–æ—Å—Ç–∏');
        }
      }
      
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µJSON —Å—Ç—Ä–æ–∫–∏
    }
  });
});

// –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
setTimeout(() => {
  console.log('\n' + '='.repeat(60));
  console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê:');
  console.log('='.repeat(60));
  
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${testsPassed}/${totalTests}`);
  
  if (testsPassed >= 3) {
    console.log('üéâ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù!');
    console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è MCP 1.2.0 —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ–¥–∞–∫—à–Ω API');
    console.log('‚úÖ BaZi –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã');
    console.log('‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏');
    console.log('üöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å astrovisor-mcp@1.2.0');
  } else {
    console.log('‚ö†Ô∏è  –¢–ï–°–¢ –ß–ê–°–¢–ò–ß–ù–û –ü–†–û–ô–î–ï–ù');
    console.log('üîß –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π');
  }
  
  console.log('\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
  console.log('```json');
  console.log('{');
  console.log('  "mcpServers": {');
  console.log('    "astrovisor": {');
  console.log('      "command": "npx",');
  console.log('      "args": ["-y", "astrovisor-mcp@1.2.0"],');
  console.log('      "env": {');
  console.log('        "ASTROVISOR_API_KEY": "your-api-key",');
  console.log('        "ASTROVISOR_URL": "https://astrovisor.io"');
  console.log('      }');
  console.log('    }');
  console.log('  }');
  console.log('}');
  console.log('```');
  
  mcp.kill();
  process.exit(0);
}, 8000);

// –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º
setTimeout(() => {
  console.log('‚ùå –¢–∞–π–º–∞—É—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞');
  mcp.kill();
  process.exit(1);
}, 15000);
