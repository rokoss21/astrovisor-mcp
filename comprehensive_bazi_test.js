#!/usr/bin/env node

import { spawn } from 'child_process';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º backend  
process.env.ASTROVISOR_API_KEY = 'pk-admin-7-CfrQ_Kvu96sPBIbTH15QEFTQIX1DMq0UJtdwhNXRU';
process.env.ASTROVISOR_URL = 'http://127.0.0.1:8002';

console.log('üîç –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BaZi –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê');
console.log('üîß Backend: http://127.0.0.1:8002');
console.log('üêâ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ 15 BaZi –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤');
console.log('=' * 60);

const mcp = spawn('node', ['build/index.js'], {
  stdio: ['pipe', 'pipe', 'pipe'],
  env: process.env
});

mcp.stderr.on('data', (data) => {
  const msg = data.toString();
  if (!msg.includes('–∑–∞–ø—É—â–µ–Ω')) {
    console.error('MCP Error:', msg);
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testPerson = {
  name: 'ÁéãÂ∞èÊòé',
  datetime: '1988-10-15T09:30:00',
  latitude: 39.9042,
  longitude: 116.4074,
  location: 'Beijing, China',
  timezone: 'Asia/Shanghai'
};

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö BaZi –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const baziTools = [
  { name: 'get_bazi_info', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ BaZi API' },
  { name: 'calculate_bazi_chart', description: '–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ BaZi' },
  { name: 'analyze_bazi_personality', description: '–ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏' },
  { name: 'bazi_complete_analysis', description: '–ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑' },
  { name: 'bazi_career_guidance', description: '–ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' },
  { name: 'bazi_relationship_guidance', description: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π' },
  { name: 'bazi_health_insights', description: '–ò–Ω—Å–∞–π—Ç—ã –ø–æ –∑–¥–æ—Ä–æ–≤—å—é' },
  { name: 'bazi_nayin_analysis', description: 'Na Yin –∞–Ω–∞–ª–∏–∑' },
  { name: 'bazi_useful_god', description: '–ü–æ–ª–µ–∑–Ω—ã–π –±–æ–≥ (Áî®Á•û)' },
  { name: 'bazi_twelve_palaces', description: '–î–≤–µ–Ω–∞–¥—Ü–∞—Ç—å –¥–≤–æ—Ä—Ü–æ–≤' },
  { name: 'bazi_life_focus_analysis', description: '–ñ–∏–∑–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã' },
  { name: 'bazi_symbolic_stars', description: '–°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ –∑–≤–µ–∑–¥—ã' },
  { name: 'bazi_luck_pillars', description: '–°—Ç–æ–ª–ø—ã —É–¥–∞—á–∏' },
  { name: 'bazi_annual_forecast', description: '–ì–æ–¥–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑' }
];

let currentTest = 0;
let passedTests = 0;
let failedTests = 0;
let testResults = {};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–∞
function sendTest() {
  if (currentTest >= baziTools.length) {
    showFinalResults();
    return;
  }

  const tool = baziTools[currentTest];
  const request = {
    jsonrpc: '2.0',
    id: currentTest + 1,
    method: 'tools/call',
    params: {
      name: tool.name,
      arguments: tool.name === 'get_bazi_info' ? {} : testPerson
    }
  };

  console.log(`${(currentTest + 1).toString().padStart(2, " ")}/14 üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${tool.description}...`);
  mcp.stdin.write(JSON.stringify(request) + '\n');
  
  currentTest++;
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
  if (currentTest < baziTools.length) {
    setTimeout(sendTest, 2000);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function showFinalResults() {
  setTimeout(() => {
    console.log('\n' + '='.repeat(60));
    console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('='.repeat(60));
    
    console.log(`üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${baziTools.length}`);
    console.log(`   –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`);
    console.log(`   –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${failedTests}`);
    console.log(`   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passedTests / baziTools.length) * 100)}%`);
    
    console.log(`\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
    for (let i = 0; i < baziTools.length; i++) {
      const tool = baziTools[i];
      const result = testResults[i + 1];
      const status = result ? '‚úÖ' : '‚ùå';
      console.log(`   ${status} ${tool.description}`);
    }
    
    if (passedTests >= baziTools.length * 0.8) {
      console.log('\nüéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢!');
      console.log('‚úÖ BaZi —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
      console.log('üöÄ astrovisor-mcp@1.3.0 —Å 30 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –≥–æ—Ç–æ–≤!');
    } else {
      console.log('\n‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò');
      console.log('üîß –ù–µ–∫–æ—Ç–æ—Ä—ã–µ BaZi –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    }
    
    console.log('\nüêâ BaZi (ÂõõÊü±ÂÖ´Â≠ó) - –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
    mcp.kill();
    process.exit(0);
  }, 3000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
mcp.stdout.on('data', (data) => {
  const lines = data.toString().split('\n').filter(line => line.trim());
  
  lines.forEach(line => {
    try {
      const response = JSON.parse(line);
      
      if (response.id && response.id >= 1 && response.id <= baziTools.length) {
        const tool = baziTools[response.id - 1];
        
        if (response.result && response.result.content) {
          const content = response.result.content[0]?.text || '';
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
          if (content.includes('error') || content.includes('Error') || content.includes('‚ùå')) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –≤ ${tool.description}`);
            testResults[response.id] = false;
            failedTests++;
          } else if (content.length > 10) {
            console.log(`   ‚úÖ ${tool.description} —Ä–∞–±–æ—Ç–∞–µ—Ç`);
            testResults[response.id] = true;
            passedTests++;
          } else {
            console.log(`   ‚ö†Ô∏è  ${tool.description} - –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç`);
            testResults[response.id] = false;
            failedTests++;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
          if (tool.name.includes('bazi') && content.includes('ÂõõÊü±ÂÖ´Â≠ó')) {
            console.log(`      üéØ –ö–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã`);
          }
          
        } else {
          console.log(`   ‚ùå –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç ${tool.description}`);
          testResults[response.id] = false;
          failedTests++;
        }
      }
      
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µJSON —Å—Ç—Ä–æ–∫–∏
    }
  });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
setTimeout(sendTest, 2000);

// –¢–∞–π–º–∞—É—Ç –≤—Å–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
setTimeout(() => {
  console.log('\n‚ùå –¢–∞–π–º–∞—É—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  mcp.kill();
  process.exit(1);
}, 60000); // 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—Å–µ —Ç–µ—Å—Ç—ã
