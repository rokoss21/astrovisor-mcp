#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""
import re

def extract_mcp_tools():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ src/index.ts"""
    
    with open('/root/astrovisor-mcp/src/index.ts', 'r') as f:
        content = f.read()
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö tools –≤ –º–∞—Å—Å–∏–≤–µ tools
    tools_section = re.search(r'const tools.*?\[(.*?)\];', content, re.DOTALL)
    if not tools_section:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤ tools")
        return
    
    tools_content = tools_section.group(1)
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ tools
    tool_pattern = r'\{\s*name:\s*"([^"]+)",\s*description:\s*"([^"]*)",\s*inputSchema:\s*\{(.*?)\}\s*\}'
    tools = re.findall(tool_pattern, tools_content, re.DOTALL)
    
    print("üîß MCP –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –ò –ò–• –ü–ê–†–ê–ú–ï–¢–†–´")
    print("=" * 60)
    
    for i, (name, description, schema) in enumerate(tools, 1):
        print(f"\n{i}. üõ†Ô∏è  {name}")
        print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º properties
        properties_match = re.search(r'properties:\s*\{(.*?)\}', schema, re.DOTALL)
        if properties_match:
            properties_content = properties_match.group(1)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ ...birthDataSchema
            if '...birthDataSchema' in properties_content:
                print("   üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–æ–∂–¥–µ–Ω–∏—è + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ:")
                print("      üîπ name (string) - –ò–º—è")
                print("      üîπ datetime (string) - –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (ISO 8601)")
                print("      üîπ latitude (number) - –®–∏—Ä–æ—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
                print("      üîπ longitude (number) - –î–æ–ª–≥–æ—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
                print("      üîπ location (string) - –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è")
                print("      üîπ timezone (string) - –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
            else:
                print("   üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            
            # –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            additional_params = re.findall(r'(\w+):\s*\{\s*type:\s*"([^"]+)"[^}]*description:\s*"([^"]*)"', properties_content)
            for param_name, param_type, param_desc in additional_params:
                print(f"      üîπ {param_name} ({param_type}) - {param_desc}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º required –ø–æ–ª—è
        required_match = re.search(r'required:\s*\[(.*?)\]', schema, re.DOTALL)
        if required_match:
            required_content = required_match.group(1)
            required_fields = re.findall(r'"([^"]+)"', required_content)
            print(f"   ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(required_fields)}")
    
    return tools

def extract_api_mappings():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ MCP tools -> API endpoints"""
    
    with open('/root/astrovisor-mcp/src/index.ts', 'r') as f:
        content = f.read()
    
    # –ü–æ–∏—Å–∫ switch statement –¥–ª—è callTool
    switch_match = re.search(r'switch\s*\(name\)\s*\{(.*?)\}', content, re.DOTALL)
    if not switch_match:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω switch statement")
        return
    
    switch_content = switch_match.group(1)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º case statements
    case_pattern = r'case\s*"([^"]+)":\s*.*?endpoint\s*=\s*[\'"]([^\'"]+)[\'"];(.*?)break;'
    cases = re.findall(case_pattern, switch_content, re.DOTALL)
    
    print("\nüåê –ú–ê–ü–ü–ò–ù–ì MCP -> API ENDPOINTS")
    print("=" * 60)
    
    for i, (tool_name, endpoint, case_body) in enumerate(cases, 1):
        print(f"\n{i}. üîß {tool_name}")
        print(f"   üåç API Endpoint: {endpoint}")
        
        # –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–∞ HTTP
        if 'method = \'GET\'' in case_body:
            print("   üì° HTTP Method: GET")
        else:
            print("   üì° HTTP Method: POST")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        if 'requestData = {' in case_body:
            print("   üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: –î–ê")
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if 'birth_datetime' in case_body:
                print("      ‚û°Ô∏è datetime -> birth_datetime")
            if 'person1:' in case_body:
                print("      ‚û°Ô∏è –ü–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ -> –í–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã person1/person2")
        elif 'requestData = args' in case_body:
            print("   üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: –ù–ï–¢ (–ø—Ä—è–º–∞—è –ø–µ—Ä–µ–¥–∞—á–∞)")
    
    return cases

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    print("üìä –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó MCP –°–ï–†–í–ï–†–ê ASTROVISOR")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    tools = extract_mcp_tools()
    
    # –ê–Ω–∞–ª–∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞ API
    mappings = extract_api_mappings()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)
    print(f"üîß –í—Å–µ–≥–æ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools)}")
    print(f"üåê –í—Å–µ–≥–æ API –º–∞–ø–ø–∏–Ω–≥–æ–≤: {len(mappings)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–æ–¥—É–ª—è–º
    modules = {}
    for tool_name, endpoint, _ in mappings:
        module = endpoint.split('/')[2] if len(endpoint.split('/')) > 2 else 'unknown'
        if module not in modules:
            modules[module] = []
        modules[module].append(tool_name)
    
    print(f"\nüèóÔ∏è  –ú–û–î–£–õ–ò API:")
    for module, tools in modules.items():
        print(f"   {module.upper()}: {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        for tool in tools:
            print(f"      ‚Ä¢ {tool}")
    
    print(f"\n‚è∞ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()
