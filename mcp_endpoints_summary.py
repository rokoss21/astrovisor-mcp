#!/usr/bin/env python3
"""
–ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –≤—Å–µ—Ö MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""
import re

def extract_endpoint_parameters():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ endpoint"""
    
    with open('/root/astrovisor-mcp/src/index.ts', 'r') as f:
        content = f.read()
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    birth_params = [
        "name (string) - –ò–º—è —á–µ–ª–æ–≤–µ–∫–∞",
        "datetime (string) - –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601",
        "latitude (number) - –®–∏—Ä–æ—Ç–∞ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
        "longitude (number) - –î–æ–ª–≥–æ—Ç–∞ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", 
        "location (string) - –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
        "timezone (string) - –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: Europe/Moscow)"
    ]
    
    # Mapping –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∫ –∏—Ö –æ—Å–æ–±—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    special_params = {
        'calculate_bazi_chart': ['gender (string) - –ü–æ–ª: "male" –∏–ª–∏ "female"'],
        'analyze_bazi_personality': ['gender (string) - –ü–æ–ª: "male" –∏–ª–∏ "female"'],
        'calculate_bazi_compatibility': [
            'person1_name (string) - –ò–º—è –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞',
            'person1_datetime (string) - –î–∞—Ç–∞/–≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ',
            'person1_latitude (number) - –®–∏—Ä–æ—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ',
            'person1_longitude (number) - –î–æ–ª–≥–æ—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ',
            'person1_location (string) - –ú–µ—Å—Ç–æ –ø–µ—Ä–≤–æ–≥–æ',
            'person1_timezone (string) - –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–µ—Ä–≤–æ–≥–æ',
            'person1_gender (string) - –ü–æ–ª –ø–µ—Ä–≤–æ–≥–æ: "male"/"female"',
            'person2_name (string) - –ò–º—è –≤—Ç–æ—Ä–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞',
            'person2_datetime (string) - –î–∞—Ç–∞/–≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ',
            'person2_latitude (number) - –®–∏—Ä–æ—Ç–∞ –≤—Ç–æ—Ä–æ–≥–æ',
            'person2_longitude (number) - –î–æ–ª–≥–æ—Ç–∞ –≤—Ç–æ—Ä–æ–≥–æ',
            'person2_location (string) - –ú–µ—Å—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ',
            'person2_timezone (string) - –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤—Ç–æ—Ä–æ–≥–æ',
            'person2_gender (string) - –ü–æ–ª –≤—Ç–æ—Ä–æ–≥–æ: "male"/"female"'
        ],
        'analyze_bazi_twelve_palaces': ['gender (string) - –ü–æ–ª: "male" –∏–ª–∏ "female"'],
        'analyze_bazi_life_focus': ['gender (string) - –ü–æ–ª: "male" –∏–ª–∏ "female"'],
        'analyze_bazi_symbolic_stars': ['gender (string) - –ü–æ–ª: "male" –∏–ª–∏ "female"'],
        'calculate_bazi_luck_pillars': ['gender (string) - –ü–æ–ª: "male" –∏–ª–∏ "female"'],
        'calculate_bazi_annual_forecast': [
            'gender (string) - –ü–æ–ª: "male" –∏–ª–∏ "female"',
            'year (number) - –ì–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024)'
        ],
        'get_bazi_complete_analysis': ['gender (string) - –ü–æ–ª: "male" –∏–ª–∏ "female"'],
        'get_bazi_career_guidance': ['gender (string) - –ü–æ–ª: "male" –∏–ª–∏ "female"'],
        'get_bazi_relationship_guidance': ['gender (string) - –ü–æ–ª: "male" –∏–ª–∏ "female"'],
        'get_bazi_health_insights': ['gender (string) - –ü–æ–ª: "male" –∏–ª–∏ "female"'],
        'analyze_bazi_nayin': ['gender (string) - –ü–æ–ª: "male" –∏–ª–∏ "female"'],
        'analyze_bazi_useful_god': ['gender (string) - –ü–æ–ª: "male" –∏–ª–∏ "female"'],
        'calculate_transits': ['target_date (string) - –î–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ (YYYY-MM-DD)'],
        'calculate_secondary_progressions': ['progression_date (string) - –î–∞—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ (YYYY-MM-DD)'],
        'calculate_solar_arc_progressions': ['progression_date (string) - –î–∞—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ (YYYY-MM-DD)'],
        'calculate_tertiary_progressions': ['progression_date (string) - –î–∞—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ (YYYY-MM-DD)'],
        'create_progressions_timeline': ['progression_date (string) - –î–∞—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ (YYYY-MM-DD)'],
        'analyze_progressions_aspects': ['progression_date (string) - –î–∞—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ (YYYY-MM-DD)']
    }
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö endpoints
    endpoint_pattern = r'case\s*"([^"]+)":\s*.*?endpoint\s*=\s*[\'"]([^\'"]+)[\'"];'
    endpoints = re.findall(endpoint_pattern, content, re.DOTALL)
    
    print("üìã –ü–û–õ–ù–ê–Ø –°–í–û–î–ö–ê MCP –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í ASTROVISOR")
    print("=" * 80)
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–æ–¥—É–ª—è–º
    modules = {}
    for tool_name, endpoint in endpoints:
        module = endpoint.split('/')[2] if len(endpoint.split('/')) > 2 else 'unknown'
        if module not in modules:
            modules[module] = []
        modules[module].append((tool_name, endpoint))
    
    for module_name, tools in sorted(modules.items()):
        print(f"\nüèóÔ∏è  {module_name.upper()} MODULE ({len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)")
        print("-" * 60)
        
        for i, (tool_name, endpoint) in enumerate(sorted(tools), 1):
            print(f"\n{i}. üîß {tool_name}")
            print(f"   üåê API: {endpoint}")
            print(f"   üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω—É–∂–Ω—ã
            if tool_name in special_params:
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                for param in special_params[tool_name]:
                    print(f"      ‚Ä¢ {param}")
            elif tool_name in ['get_bazi_info', 'get_progressions_info']:
                # Info endpoints –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                print(f"      ‚Ä¢ –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            else:
                # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–æ–∂–¥–µ–Ω–∏—è
                for param in birth_params:
                    print(f"      ‚Ä¢ {param}")
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 80)
    total_tools = sum(len(tools) for tools in modules.values())
    print(f"üîß –í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {total_tools}")
    print(f"üèóÔ∏è  –ú–æ–¥—É–ª–µ–π: {len(modules)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥—É–ª—è–º
    for module_name, tools in sorted(modules.items(), key=lambda x: len(x[1]), reverse=True):
        print(f"   {module_name.upper():20} - {len(tools):2} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    
    print(f"\n‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å MCP —Å–µ—Ä–≤–µ—Ä–∞: 100% (–≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç API mappings)")
    
    return modules

if __name__ == "__main__":
    modules = extract_endpoint_parameters()
