#!/usr/bin/env node
import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { CallToolRequestSchema, ListToolsRequestSchema } from '@modelcontextprotocol/sdk/types.js';
import axios from 'axios';
import 'dotenv/config';

// API Configuration
const API_BASE_URL = process.env.ASTROVISOR_URL || process.env.ASTRO_API_BASE_URL || 'https://astrovisor.io';
const API_KEY = process.env.ASTROVISOR_API_KEY || process.env.ASTRO_API_KEY || '';

if (!API_KEY) {
  throw new Error('ASTROVISOR_API_KEY or ASTRO_API_KEY environment variable is required');
}

// API Client
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${API_KEY}`
  },
  timeout: 30000
});

// Common schema definitions
const birthDataSchema = {
  name: { type: "string", description: "Person's name" },
  datetime: { type: "string", description: "Birth date and time (ISO 8601 format)", example: "1988-07-12T12:15:00" },
  latitude: { type: "number", description: "Birth latitude", example: 55.0084 },
  longitude: { type: "number", description: "Birth longitude", example: 82.9357 },
  location: { type: "string", description: "Birth location", example: "Novosibirsk, Russia" },
  timezone: { type: "string", description: "Timezone", example: "Asia/Novosibirsk" }
};

const baziDataSchema = {
  name: { type: "string", description: "Person's name" },
  datetime: { type: "string", description: "Birth date and time (ISO 8601 format)", example: "1988-07-12T12:15:00" },
  latitude: { type: "number", description: "Birth latitude", example: 55.0084 },
  longitude: { type: "number", description: "Birth longitude", example: 82.9357 },
  location: { type: "string", description: "Birth location", example: "Novosibirsk, Russia" },
  timezone: { type: "string", description: "Timezone", example: "Asia/Novosibirsk" },
  gender: { type: "string", enum: ["male", "female"], description: "Gender for BaZi analysis" }
};

const progressionDataSchema = {
  name: { type: "string", description: "Person's name" },
  datetime: { type: "string", description: "Birth date and time (ISO 8601 format)", example: "1988-07-12T12:15:00" },
  latitude: { type: "number", description: "Birth latitude", example: 55.0084 },
  longitude: { type: "number", description: "Birth longitude", example: 82.9357 },
  location: { type: "string", description: "Birth location", example: "Novosibirsk, Russia" },
  timezone: { type: "string", description: "Timezone", example: "Asia/Novosibirsk" },
  progression_date: { type: "string", description: "Progression date (YYYY-MM-DD)", example: "2024-07-12" }
};

// Server setup
const server = new Server(
  {
    name: "astrovisor-complete-server",
    version: "2.3.3"
  },
  {
    capabilities: {
      tools: {}
    }
  }
);

// Tool definitions
const tools = [
  // === CORE ASTROLOGY ===
  {
    name: "calculate_natal_chart",
    description: "üåü Calculate comprehensive natal (birth) chart with planets, houses, aspects, and personality analysis",
    inputSchema: {
      type: "object",
      properties: birthDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone"]
    }
  },
  {
    name: "calculate_vedic_chart",
    description: "üïâÔ∏è Calculate Vedic (Jyotish) astrology chart with divisional charts and dasha periods",
    inputSchema: {
      type: "object",
      properties: birthDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone"]
    }
  },
  {
    name: "calculate_human_design",
    description: "‚ö° Calculate Human Design chart with type, strategy, authority, and profile analysis",
    inputSchema: {
      type: "object",
      properties: birthDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone"]
    }
  },
  {
    name: "calculate_numerology",
    description: "üî¢ Calculate comprehensive numerology analysis with life path, destiny, and personal year numbers",
    inputSchema: {
      type: "object",
      properties: birthDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone"]
    }
  },
  {
    name: "calculate_matrix_of_destiny",
    description: "üé≠ Calculate Matrix of Destiny with 22 archetypes analysis for life purpose insights",
    inputSchema: {
      type: "object",
      properties: birthDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone"]
    }
  },
  {
    name: "calculate_transits",
    description: "üåç Calculate current planetary transits and their aspects to natal chart",
    inputSchema: {
      type: "object",
      properties: {
        ...birthDataSchema,
        target_date: { type: "string", description: "Date for transit analysis (YYYY-MM-DD)", example: "2024-01-15" }
      },
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone"]
    }
  },

  // === PROGRESSIONS ===
  {
    name: "calculate_secondary_progressions",
    description: "üåô Calculate secondary progressions (day = year) for psychological development analysis",
    inputSchema: {
      type: "object",
      properties: progressionDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone", "progression_date"]
    }
  },
  {
    name: "calculate_solar_arc_progressions",
    description: "‚òÄÔ∏è Calculate solar arc progressions for timing major life events",
    inputSchema: {
      type: "object",
      properties: progressionDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone", "progression_date"]
    }
  },
  {
    name: "calculate_tertiary_progressions",
    description: "üåü Calculate tertiary progressions for monthly cycles and detailed timing",
    inputSchema: {
      type: "object",
      properties: progressionDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone", "progression_date"]
    }
  },
  {
    name: "compare_progressions",
    description: "‚öñÔ∏è Compare different progression methods (secondary, solar arc, tertiary) for comprehensive analysis",
    inputSchema: {
      type: "object",
      properties: {
        ...progressionDataSchema,
        compare_methods: { type: "array", items: { type: "string" }, description: "Methods to compare", example: ["secondary", "solar_arc"] }
      },
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone", "progression_date"]
    }
  },
  {
    name: "create_progressions_timeline",
    description: "üìÖ Create comprehensive progressions timeline for life planning and event timing",
    inputSchema: {
      type: "object",
      properties: progressionDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone", "progression_date"]
    }
  },
  {
    name: "analyze_progressions_aspects",
    description: "üéØ Analyze specific progressions aspects for precise timing and influences",
    inputSchema: {
      type: "object",
      properties: progressionDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone", "progression_date"]
    }
  },
  {
    name: "get_progressions_info",
    description: "‚ÑπÔ∏è Get comprehensive information about progressions module and its capabilities",
    inputSchema: {
      type: "object",
      properties: {},
      required: []
    }
  },

  // === BAZI (Chinese Astrology) ===
  {
    name: "calculate_bazi_chart",
    description: "üêâ Calculate BaZi Four Pillars chart with elemental analysis and life insights",
    inputSchema: {
      type: "object",
      properties: baziDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone", "gender"]
    }
  },
  {
    name: "analyze_bazi_personality",
    description: "üé≠ Analyze BaZi personality traits, strengths, and behavioral patterns",
    inputSchema: {
      type: "object",
      properties: baziDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone", "gender"]
    }
  },
  {
    name: "calculate_bazi_compatibility",
    description: "üíï Calculate BaZi compatibility between two people for relationships",
    inputSchema: {
      type: "object",
      properties: {
        person1_name: { type: "string", description: "First person's name" },
        person1_datetime: { type: "string", description: "First person's birth datetime" },
        person1_latitude: { type: "number", description: "First person's birth latitude" },
        person1_longitude: { type: "number", description: "First person's birth longitude" },
        person1_location: { type: "string", description: "First person's birth location" },
        person1_timezone: { type: "string", description: "First person's timezone" },
        person1_gender: { type: "string", enum: ["male", "female"], description: "First person's gender" },
        person2_name: { type: "string", description: "Second person's name" },
        person2_datetime: { type: "string", description: "Second person's birth datetime" },
        person2_latitude: { type: "number", description: "Second person's birth latitude" },
        person2_longitude: { type: "number", description: "Second person's birth longitude" },
        person2_location: { type: "string", description: "Second person's birth location" },
        person2_timezone: { type: "string", description: "Second person's timezone" },
        person2_gender: { type: "string", enum: ["male", "female"], description: "Second person's gender" }
      },
      required: ["person1_name", "person1_datetime", "person1_latitude", "person1_longitude", "person1_location", "person1_timezone", "person1_gender", "person2_name", "person2_datetime", "person2_latitude", "person2_longitude", "person2_location", "person2_timezone", "person2_gender"]
    }
  },
  {
    name: "get_bazi_info",
    description: "‚ÑπÔ∏è Get information about BaZi system and available analysis methods",
    inputSchema: {
      type: "object",
      properties: {},
      required: []
    }
  },
  {
    name: "analyze_bazi_twelve_palaces",
    description: "üèõÔ∏è Analyze BaZi Twelve Palaces for detailed life area insights",
    inputSchema: {
      type: "object",
      properties: baziDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone", "gender"]
    }
  },
  {
    name: "analyze_bazi_life_focus",
    description: "üéØ Analyze BaZi life focus areas and priorities for personal development",
    inputSchema: {
      type: "object",
      properties: baziDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone", "gender"]
    }
  },
  {
    name: "analyze_bazi_symbolic_stars",
    description: "‚≠ê Analyze BaZi symbolic stars for spiritual and karmic insights",
    inputSchema: {
      type: "object",
      properties: baziDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone", "gender"]
    }
  },
  {
    name: "calculate_bazi_luck_pillars",
    description: "üçÄ Calculate BaZi luck pillars for 10-year life cycle predictions",
    inputSchema: {
      type: "object",
      properties: baziDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone", "gender"]
    }
  },
  {
    name: "calculate_bazi_annual_forecast",
    description: "üìÖ Calculate BaZi annual forecast with monthly breakdowns",
    inputSchema: {
      type: "object",
      properties: {
        ...baziDataSchema,
        year: { type: "integer", description: "Target year for forecast", example: 2024 }
      },
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone", "gender", "year"]
    }
  },
  {
    name: "get_bazi_complete_analysis",
    description: "üìä Get complete BaZi analysis with all major components",
    inputSchema: {
      type: "object",
      properties: baziDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone", "gender"]
    }
  },
  {
    name: "get_bazi_career_guidance",
    description: "üíº Get BaZi career guidance and professional direction analysis",
    inputSchema: {
      type: "object",
      properties: baziDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone", "gender"]
    }
  },
  {
    name: "get_bazi_relationship_guidance",
    description: "üíï Get BaZi relationship guidance for love and partnerships",
    inputSchema: {
      type: "object",
      properties: baziDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone", "gender"]
    }
  },
  {
    name: "get_bazi_health_insights",
    description: "üè• Get BaZi health insights and wellness recommendations",
    inputSchema: {
      type: "object",
      properties: baziDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone", "gender"]
    }
  },
  {
    name: "analyze_bazi_nayin",
    description: "üéµ Analyze BaZi Nayin (60 sounds) for spiritual and destiny insights",
    inputSchema: {
      type: "object",
      properties: baziDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone", "gender"]
    }
  },
  {
    name: "analyze_bazi_useful_god",
    description: "üôè BaZi Useful God (beneficial elements) analysis",
    inputSchema: {
      type: "object",
      properties: baziDataSchema,
      required: ["name", "datetime", "latitude", "longitude", "location", "timezone", "gender"]
    }
  }
];

// Tool handlers
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return { tools };
});

server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;
  
  try {
    let endpoint = '';
    let requestData = {};
    let method = 'POST'; // Default method

    // Route mapping
    switch (name) {
      // Core Astrology
      case "calculate_natal_chart":
        endpoint = '/api/natal/chart';
        requestData = args;
        break;
      case "calculate_vedic_chart":
        endpoint = '/api/jyotish/calculate';
        requestData = args;
        break;
      case "calculate_human_design":
        endpoint = '/api/human-design/calculate';
        requestData = args;
        break;
      case "calculate_numerology":
        endpoint = '/api/numerology/calculate';
        requestData = args;
        break;
      case "calculate_matrix_of_destiny":
        endpoint = '/api/matrix/calculate';
        requestData = args;
        break;
      case "calculate_transits":
        endpoint = '/api/transits/calculate';
        // Transform args to match backend expectations
        requestData = {
          name: args.name,
          birth_datetime: args.datetime,
          birth_latitude: args.latitude,
          birth_longitude: args.longitude,
          birth_location: args.location,
          birth_timezone: args.timezone,
          target_date: args.target_date || new Date().toISOString().split('T')[0]
        };
        break;

      // === PROGRESSIONS ===
      case "calculate_secondary_progressions":
        endpoint = '/api/progressions/secondary';
        requestData = args;
        break;
      case "calculate_solar_arc_progressions":
        endpoint = '/api/progressions/solar-arc';
        requestData = args;
        break;
      case "calculate_tertiary_progressions":
        endpoint = '/api/progressions/tertiary';
        requestData = args;
        break;
      case "compare_progressions":
        endpoint = '/api/progressions/compare';
        requestData = args;
        break;
      case "create_progressions_timeline":
        endpoint = '/api/progressions/timeline';
        requestData = args;
        break;
      case "analyze_progressions_aspects":
        endpoint = '/api/progressions/aspects';
        requestData = args;
        break;
      case "get_progressions_info":

      // === SOLAR RETURN ===
      case "calculate_solar_return":
        endpoint = "/api/solar/calculate";
        requestData = args;
        break;
        endpoint = '/api/progressions/info';
        method = 'GET';
        requestData = {};
        break;

      // BaZi
      case "calculate_bazi_chart":
        endpoint = '/api/bazi/chart';
        requestData = args;
        break;
      case "analyze_bazi_personality":
        endpoint = '/api/bazi/personality';
        requestData = args;
        break;
      case "calculate_bazi_compatibility":
        endpoint = '/api/bazi/compatibility';
        requestData = {
          person1: {
            name: args.person1_name,
            datetime: args.person1_datetime,
            latitude: args.person1_latitude,
            longitude: args.person1_longitude,
            location: args.person1_location,
            timezone: args.person1_timezone,
            gender: args.person1_gender
          },
          person2: {
            name: args.person2_name,
            datetime: args.person2_datetime,
            latitude: args.person2_latitude,
            longitude: args.person2_longitude,
            location: args.person2_location,
            timezone: args.person2_timezone,
            gender: args.person2_gender
          }
        };
        break;
      case "get_bazi_info":
        endpoint = '/api/bazi/info';
        method = 'GET';
        requestData = {};
        break;
      case "analyze_bazi_twelve_palaces":
        endpoint = '/api/bazi/twelve-palaces';
        requestData = args;
        break;
      case "analyze_bazi_life_focus":
        endpoint = '/api/bazi/life-focus';
        requestData = args;
        break;
      case "analyze_bazi_symbolic_stars":
        endpoint = '/api/bazi/symbolic-stars';
        requestData = args;
        break;
      case "calculate_bazi_luck_pillars":
        endpoint = '/api/bazi/luck-pillars';
        requestData = args;
        break;
      case "calculate_bazi_annual_forecast":
        endpoint = '/api/bazi/annual-forecast';
        requestData = args;
        break;
      case "get_bazi_complete_analysis":
        endpoint = '/api/bazi/complete-analysis';
        requestData = args;
        break;
      case "get_bazi_career_guidance":
        endpoint = '/api/bazi/career-guidance';
        requestData = args;
        break;
      case "get_bazi_relationship_guidance":
        endpoint = '/api/bazi/relationship-guidance';
        requestData = args;
        break;
      case "get_bazi_health_insights":
        endpoint = '/api/bazi/health-insights';
        requestData = args;
        break;
      case "analyze_bazi_nayin":
        endpoint = '/api/bazi/nayin-analysis';
        requestData = args;
        break;
      case "analyze_bazi_useful_god":
        endpoint = '/api/bazi/useful-god';
        requestData = args;
        break;

      default:
        throw new Error(`Unknown tool: ${name}`);
    }

    // Make request based on method
    const response = method === 'GET' 
      ? await apiClient.get(endpoint)
      : await apiClient.post(endpoint, requestData);
      
    const result = JSON.stringify(response.data, null, 2);

    return {
      content: [{
        type: "text", 
        text: `‚ú® ${name} result:\n\n${result}`
      }]
    };

  } catch (error: any) {
    let errorMessage = `‚ùå Error executing ${name}`;
    
    if (error.response) {
      errorMessage += `\nHTTP ${error.response.status}: ${error.response.statusText}`;
      if (error.response.data) {
        errorMessage += `\nDetails: ${JSON.stringify(error.response.data, null, 2)}`;
      }
    } else if (error.request) {
      errorMessage += `\nNetwork error: No response received`;
    } else {
      errorMessage += `\nError: ${error.message}`;
    }
    
    return {
      content: [{
        type: "text",
        text: errorMessage
      }],
      isError: true
    };
  }
});

// Start server
const transport = new StdioServerTransport();
server.connect(transport);

console.error('üåü AstroVisor MCP Server v2.3.0 with Progressions started');
