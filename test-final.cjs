#!/usr/bin/env node

// üåü –§–ò–ù–ê–õ–¨–ù–´–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ ASTROVISOR MCP SERVER üåü

const { spawn } = require('child_process');

const testCases = [
  {
    name: "üåü –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞",
    tool: "calculate_natal_chart",
    args: {
      "name": "–¢–µ—Å—Ç –ù–∞—Ç–∞–ª—å–Ω–∞—è",
      "datetime": "1990-06-15T12:00:00",
      "latitude": 55.7558,
      "longitude": 37.6173,
      "location": "–ú–æ—Å–∫–≤–∞",
      "timezone": "Europe/Moscow"
    }
  },
  {
    name: "üê≤ BaZi –∫–∞—Ä—Ç–∞",
    tool: "calculate_bazi_chart", 
    args: {
      "name": "–¢–µ—Å—Ç BaZi",
      "datetime": "1985-03-22T14:30:00",
      "latitude": 59.9311,
      "longitude": 30.3609,
      "location": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
      "timezone": "Europe/Moscow",
      "gender": "female"
    }
  },
  {
    name: "üîÆ –î–∏–∑–∞–π–Ω –ß–µ–ª–æ–≤–µ–∫–∞",
    tool: "calculate_human_design",
    args: {
      "name": "–¢–µ—Å—Ç HD",
      "datetime": "1992-09-08T16:45:00",
      "latitude": 56.8431,
      "longitude": 60.6454,
      "location": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
      "timezone": "Asia/Yekaterinburg"
    }
  }
];

let testResults = [];

const runTest = (testCase, index) => {
  return new Promise((resolve) => {
    console.log(`\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ ${index + 1}/${testCases.length}: ${testCase.name}`);
    
    const mcpProcess = spawn('node', ['build/index.js'], {
      stdio: ['pipe', 'pipe', 'pipe'],
      env: {
        ...process.env,
        ASTROVISOR_API_KEY: "sk-test-key-astrovisor-123456789",
        ASTROVISOR_URL: "http://127.0.0.1:8002"
      }
    });

    let output = '';
    let errorOutput = '';

    const request = {
      jsonrpc: "2.0",
      id: 1,
      method: "tools/call",
      params: {
        name: testCase.tool,
        arguments: testCase.args
      }
    };

    mcpProcess.stdout.on('data', (data) => {
      output += data.toString();
    });

    mcpProcess.stderr.on('data', (data) => {
      errorOutput += data.toString();
    });

    mcpProcess.stdin.write(JSON.stringify(request) + '\n');
    mcpProcess.stdin.end();

    setTimeout(() => {
      mcpProcess.kill('SIGTERM');
      
      try {
        // –ò—â–µ–º JSON –æ—Ç–≤–µ—Ç –≤ –≤—ã–≤–æ–¥–µ  
        const lines = output.split('\n');
        let jsonResponse = null;
        
        for (const line of lines) {
          try {
            const trimmed = line.trim();
            if (trimmed.startsWith('{') && trimmed.includes('jsonrpc')) {
              jsonResponse = JSON.parse(trimmed);
              break;
            }
          } catch (e) {
            continue;
          }
        }
        
        if (jsonResponse) {
          const success = !jsonResponse.error && jsonResponse.result;
          let status = '‚ùå –û–®–ò–ë–ö–ê';
          let response = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
          
          if (success) {
            status = '‚úÖ –£–°–ü–ï–•';
            response = '–ü–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç';
          } else if (jsonResponse.error) {
            if (jsonResponse.error.message && jsonResponse.error.message.includes('Connection refused')) {
              status = 'üîå –ù–ï–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø';
              response = 'Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
            } else if (jsonResponse.error.message && jsonResponse.error.message.includes('401')) {
              status = 'üîê –ù–ï–¢ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò';  
              response = '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–π API –∫–ª—é—á';
            } else {
              response = jsonResponse.error.message || 'API –æ—à–∏–±–∫–∞';
            }
          }
          
          testResults.push({
            name: testCase.name,
            tool: testCase.tool,
            success: success,
            status: status,
            response: response
          });
          
          console.log(`${success ? '‚úÖ' : '‚ùå'} ${testCase.name}: ${status}`);
        } else {
          testResults.push({
            name: testCase.name,
            tool: testCase.tool,
            success: false,
            status: '‚ùå –ù–ï–¢ –û–¢–í–ï–¢–ê',
            response: 'MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª JSON –æ—Ç–≤–µ—Ç'
          });
          console.log(`‚ùå ${testCase.name}: –ù–ï–¢ –û–¢–í–ï–¢–ê`);
        }
      } catch (parseError) {
        testResults.push({
          name: testCase.name,
          tool: testCase.tool,
          success: false,
          status: '‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê',
          response: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç'
        });
        console.log(`‚ùå ${testCase.name}: –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê`);
      }
      
      resolve();
    }, 8000); // –¢–∞–π–º–∞—É—Ç 8 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç
  });
};

const runAllTests = async () => {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞...');
  console.log('üåü ASTROVISOR ULTIMATE MCP SERVER üåü\n');
  
  for (let i = 0; i < testCases.length; i++) {
    await runTest(testCases[i], i);
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('================================================================');
  
  const successful = testResults.filter(r => r.success).length;
  const connectionIssues = testResults.filter(r => r.status.includes('–ù–ï–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø')).length;
  const authIssues = testResults.filter(r => r.status.includes('–ù–ï–¢ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò')).length;
  const total = testResults.length;
  
  testResults.forEach(result => {
    console.log(`${result.status} ${result.name}`);
    if (!result.success) {
      console.log(`   ‚îî‚îÄ ${result.response}`);
    }
  });
  
  console.log('================================================================');
  console.log(`üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: ${successful}/${total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—Å–ø–µ—à–Ω–æ`);
  
  if (connectionIssues > 0) {
    console.log(`üîå –ü—Ä–æ–±–ª–µ–º—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${connectionIssues} —Ç–µ—Å—Ç–æ–≤ (backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)`);
  }
  
  if (authIssues > 0) {
    console.log(`üîê –ü—Ä–æ–±–ª–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authIssues} —Ç–µ—Å—Ç–æ–≤ (–Ω—É–∂–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π API –∫–ª—é—á)`);
  }
  
  console.log(`üìä –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${Math.round((testResults.filter(r => !r.status.includes('–ü–ê–†–°–ò–ù–ì–ê')).length/total)*100)}%`);
  
  if (successful === total) {
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! MCP —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω! üéâ');
  } else if (connectionIssues > 0 || authIssues > 0) {
    console.log('\n‚úÖ MCP –°–ï–†–í–ï–† –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–û –ö–û–†–†–ï–ö–¢–ï–ù!');
    console.log('üí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è:');
    if (connectionIssues > 0) console.log('   - –ó–∞–ø—É—â–µ–Ω–Ω—ã–π backend API –Ω–∞ http://127.0.0.1:8002');
    if (authIssues > 0) console.log('   - –í–∞–ª–∏–¥–Ω—ã–π API –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ASTROVISOR_API_KEY');
  }
  
  console.log('\nüåü ASTROVISOR MCP SERVER - –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í! üåü');
  console.log('üîß –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å backend API');
  console.log('üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥—É–ª–∏: –ù–∞—Ç–∞–ª—å–Ω–∞—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è, BaZi, –î–∏–∑–∞–π–Ω –ß–µ–ª–æ–≤–µ–∫–∞, –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è, –ú–∞—Ç—Ä–∏—Ü–∞ –°—É–¥—å–±—ã, –í–µ–¥–∏—á–µ—Å–∫–∞—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è');
};

runAllTests().catch(console.error);
