#!/usr/bin/env python3
"""
–¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö API mappings
"""

def analyze_mcp_server():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç MCP —Å–µ—Ä–≤–µ—Ä –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ tools –∏ API mappings"""
    
    with open('/root/astrovisor-mcp/src/index.ts', 'r') as f:
        content = f.read()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞ tools
    tools_names = []
    import re
    
    # –ü–æ–∏—Å–∫ –º–∞—Å—Å–∏–≤–∞ tools
    tools_match = re.search(r'const tools.*?\[(.*?)\];', content, re.DOTALL)
    if tools_match:
        tools_content = tools_match.group(1)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ name –ø–æ–ª—è
        names = re.findall(r'name:\s*"([^"]+)"', tools_content)
        tools_names = names
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ case statements
    case_statements = []
    cases = re.findall(r'case\s*"([^"]+)":', content)
    case_statements = cases
    
    print("üîß –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó MCP –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
    print("=" * 60)
    print(f"üìä –í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ tools: {len(tools_names)}")
    print(f"üìä –í—Å–µ–≥–æ case statements: {len(case_statements)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    missing_cases = []
    for tool in tools_names:
        if tool not in case_statements:
            missing_cases.append(tool)
    
    extra_cases = []
    for case in case_statements:
        if case not in tools_names:
            extra_cases.append(case)
    
    print(f"\n‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ë–ï–ó API mapping ({len(missing_cases)}):")
    for tool in missing_cases:
        print(f"   ‚Ä¢ {tool}")
    
    print(f"\n‚ö†Ô∏è  Case statements –ë–ï–ó –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ({len(extra_cases)}):")
    for case in extra_cases:
        print(f"   ‚Ä¢ {case}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö endpoints
    working_tools = [tool for tool in tools_names if tool in case_statements]
    print(f"\n‚úÖ –†–ê–ë–û–¢–ê–Æ–©–ò–ï –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ({len(working_tools)}):")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–æ–¥—É–ª—è–º
    modules = {
        'natal': [],
        'jyotish': [],
        'human-design': [],
        'numerology': [],
        'matrix': [],
        'transits': [],
        'progressions': [],
        'bazi': [],
        'solar': [],
        'other': []
    }
    
    for tool in working_tools:
        if 'natal' in tool:
            modules['natal'].append(tool)
        elif 'vedic' in tool or 'jyotish' in tool:
            modules['jyotish'].append(tool)
        elif 'human_design' in tool:
            modules['human-design'].append(tool)
        elif 'numerology' in tool:
            modules['numerology'].append(tool)
        elif 'matrix' in tool:
            modules['matrix'].append(tool)
        elif 'transit' in tool:
            modules['transits'].append(tool)
        elif 'progression' in tool:
            modules['progressions'].append(tool)
        elif 'bazi' in tool:
            modules['bazi'].append(tool)
        elif 'solar' in tool:
            modules['solar'].append(tool)
        else:
            modules['other'].append(tool)
    
    for module, tools in modules.items():
        if tools:
            print(f"\n   üèóÔ∏è  {module.upper()} ({len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤):")
            for tool in tools:
                print(f"      ‚Ä¢ {tool}")
    
    # –ê–Ω–∞–ª–∏–∑ API endpoints –¥–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    print(f"\nüåê API ENDPOINTS –î–õ–Ø –†–ê–ë–û–¢–ê–Æ–©–ò–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í:")
    print("=" * 60)
    
    endpoint_pattern = r'case\s*"([^"]+)":\s*.*?endpoint\s*=\s*[\'"]([^\'"]+)[\'"];'
    endpoints = re.findall(endpoint_pattern, content, re.DOTALL)
    
    for tool_name, endpoint in endpoints:
        if tool_name in working_tools:
            print(f"‚úÖ {tool_name:30} -> {endpoint}")
        else:
            print(f"‚ö†Ô∏è  {tool_name:30} -> {endpoint} (–Ω–µ—Ç –≤ tools)")
    
    return {
        'tools_count': len(tools_names),
        'cases_count': len(case_statements),
        'working_count': len(working_tools),
        'missing_cases': missing_cases,
        'extra_cases': extra_cases,
        'modules': modules
    }

if __name__ == "__main__":
    result = analyze_mcp_server()
    
    print(f"\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 60)
    print(f"‚úÖ –†–∞–±–æ—á–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {result['working_count']}/{result['tools_count']} ({result['working_count']/result['tools_count']*100:.1f}%)")
    print(f"‚ùå –ë–µ–∑ API mapping: {len(result['missing_cases'])}")
    print(f"‚ö†Ô∏è  –õ–∏—à–Ω–∏—Ö case: {len(result['extra_cases'])}")
