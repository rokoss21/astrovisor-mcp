#!/usr/bin/env node

// üåü –¢–ï–°–¢ PRODUCTION ASTROVISOR MCP SERVER üåü

const { spawn } = require('child_process');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const PRODUCTION_CONFIG = {
  ASTROVISOR_API_KEY: "pk-admin-7-CfrQ_Kvu96sPBIbTH15QEFTQIX1DMq0UJtdwhNXRU",
  ASTROVISOR_URL: "https://astrovisor.io"
};

const testCases = [
  {
    name: "üåü –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞",
    tool: "calculate_natal_chart",
    args: {
      "name": "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞",
      "datetime": "1990-06-15T12:00:00",
      "latitude": 55.7558,
      "longitude": 37.6173,
      "location": "–ú–æ—Å–∫–≤–∞",
      "timezone": "Europe/Moscow"
    }
  },
  {
    name: "üê≤ BaZi –∫–∞—Ä—Ç–∞",
    tool: "calculate_bazi_chart", 
    args: {
      "name": "–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤",
      "datetime": "1985-03-22T14:30:00",
      "latitude": 59.9311,
      "longitude": 30.3609,
      "location": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
      "timezone": "Europe/Moscow",
      "gender": "male"
    }
  },
  {
    name: "üß† BaZi –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏",
    tool: "analyze_bazi_personality",
    args: {
      "name": "–ï–ª–µ–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞", 
      "datetime": "1988-12-10T09:15:00",
      "latitude": 55.7558,
      "longitude": 37.6173,
      "location": "–ú–æ—Å–∫–≤–∞",
      "timezone": "Europe/Moscow",
      "gender": "female"
    }
  },
  {
    name: "üîÆ –î–∏–∑–∞–π–Ω –ß–µ–ª–æ–≤–µ–∫–∞",
    tool: "calculate_human_design",
    args: {
      "name": "–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤",
      "datetime": "1992-09-08T16:45:00",
      "latitude": 56.8431,
      "longitude": 60.6454,
      "location": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
      "timezone": "Asia/Yekaterinburg"
    }
  }
];

let testResults = [];

const runTest = (testCase, index) => {
  return new Promise((resolve) => {
    console.log(`\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ ${index + 1}/${testCases.length}: ${testCase.name}`);
    console.log(`   ‚îî‚îÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: ${PRODUCTION_CONFIG.ASTROVISOR_URL}`);
    
    const mcpProcess = spawn('node', ['build/index.js'], {
      stdio: ['pipe', 'pipe', 'pipe'],
      env: {
        ...process.env,
        ...PRODUCTION_CONFIG
      }
    });

    let output = '';
    let errorOutput = '';

    const request = {
      jsonrpc: "2.0",
      id: 1,
      method: "tools/call",
      params: {
        name: testCase.tool,
        arguments: testCase.args
      }
    };

    mcpProcess.stdout.on('data', (data) => {
      output += data.toString();
    });

    mcpProcess.stderr.on('data', (data) => {
      errorOutput += data.toString();
    });

    mcpProcess.stdin.write(JSON.stringify(request) + '\n');
    mcpProcess.stdin.end();

    setTimeout(() => {
      mcpProcess.kill('SIGTERM');
      
      try {
        // –ò—â–µ–º JSON –æ—Ç–≤–µ—Ç –≤ –≤—ã–≤–æ–¥–µ  
        const lines = output.split('\n');
        let jsonResponse = null;
        
        for (const line of lines) {
          try {
            const trimmed = line.trim();
            if (trimmed.startsWith('{') && trimmed.includes('jsonrpc')) {
              jsonResponse = JSON.parse(trimmed);
              break;
            }
          } catch (e) {
            continue;
          }
        }
        
        if (jsonResponse) {
          const success = !jsonResponse.error && jsonResponse.result;
          let status = '‚ùå –û–®–ò–ë–ö–ê';
          let response = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
          
          if (success) {
            status = '‚úÖ –£–°–ü–ï–•';
            response = '–ü–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç production API';
          } else if (jsonResponse.error) {
            if (jsonResponse.error.message && jsonResponse.error.message.includes('ECONNREFUSED')) {
              status = 'üîå –ù–ï–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø';
              response = 'Production API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
            } else if (jsonResponse.error.message && jsonResponse.error.message.includes('401')) {
              status = 'üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø';  
              response = '–ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º';
            } else if (jsonResponse.error.message && jsonResponse.error.message.includes('404')) {
              status = 'üõ£Ô∏è –ù–ï–¢ –≠–ù–î–ü–û–ò–ù–¢–ê';
              response = 'API —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
            } else if (jsonResponse.error.message && jsonResponse.error.message.includes('422')) {
              status = 'üìù –î–ê–ù–ù–´–ï';
              response = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ';
            } else {
              response = jsonResponse.error.message || 'API –æ—à–∏–±–∫–∞';
            }
          }
          
          testResults.push({
            name: testCase.name,
            tool: testCase.tool,
            success: success,
            status: status,
            response: response
          });
          
          console.log(`   ${success ? '‚úÖ' : '‚ùå'} ${status}: ${response}`);
        } else {
          testResults.push({
            name: testCase.name,
            tool: testCase.tool,
            success: false,
            status: '‚ùå –ù–ï–¢ –û–¢–í–ï–¢–ê',
            response: 'MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª JSON –æ—Ç–≤–µ—Ç'
          });
          console.log(`   ‚ùå –ù–ï–¢ –û–¢–í–ï–¢–ê: MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª`);
        }
      } catch (parseError) {
        testResults.push({
          name: testCase.name,
          tool: testCase.tool,
          success: false,
          status: '‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê',
          response: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç'
        });
        console.log(`   ‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê: ${parseError.message}`);
      }
      
      resolve();
    }, 15000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è production –∑–∞–ø—Ä–æ—Å–æ–≤
  });
};

const runAllTests = async () => {
  console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PRODUCTION ASTROVISOR MCP SERVER');
  console.log('================================================================');
  console.log(`üåê API URL: ${PRODUCTION_CONFIG.ASTROVISOR_URL}`);
  console.log(`üîë API Key: ${PRODUCTION_CONFIG.ASTROVISOR_API_KEY.substring(0, 20)}...`);
  console.log('================================================================\n');
  
  for (let i = 0; i < testCases.length; i++) {
    await runTest(testCases[i], i);
    await new Promise(resolve => setTimeout(resolve, 2000)); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É production –∑–∞–ø—Ä–æ—Å–∞–º–∏
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ PRODUCTION –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('================================================================');
  
  const successful = testResults.filter(r => r.success).length;
  const total = testResults.length;
  
  testResults.forEach(result => {
    console.log(`${result.success ? '‚úÖ' : '‚ùå'} ${result.name}`);
    console.log(`   ‚îî‚îÄ ${result.status}: ${result.response}`);
  });
  
  console.log('================================================================');
  console.log(`üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: ${successful}/${total} —Ç–µ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω—ã`);
  console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((successful/total)*100)}%`);
  
  if (successful === total) {
    console.log('\nüéâ –í–°–ï PRODUCTION –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê! üéâ');
  } else if (successful > 0) {
    console.log(`\n‚úÖ MCP –°–ï–†–í–ï–† –†–ê–ë–û–¢–ê–ï–¢! ${successful}/${total} –º–æ–¥—É–ª–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç`);
  }
  
  console.log('\nüåü PRODUCTION ASTROVISOR MCP SERVER - –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù! üåü');
  console.log('üîß –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è https://astrovisor.io/api/*');
};

runAllTests().catch(console.error);
